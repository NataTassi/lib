Reverse Engineering (RE)


Syscalls: Linux offers many essential functions called system calls or syscalls. The system call is the fundamental interface between an application and the Linux kernel. Some common syscalls: execve, write


Commands:

File information:                 file <file>
Display data in hex numbers:      hd <file> (hd is an alias for hexdump -C)
Disassemble binary:               objdump -M intel <program> (-s: full contents, -S: source and disassembly, -d: disassemble exec sections, -D: disassemble all sections, -x: headers)
Addresses of entries in GOT:      objdump --dynamic-reloc <program>
Show info about ELF files:        readelf (-h: header, -S: sections, -l: segments)
Print program printable strings:  strings <program>
Trace system calls and signals:   strace <program_path>
Trace library calls:              ltrace <program_path>
Print shared libraries:           ldd <program> (ldd stands for list dynamic dependencies)
ASCII to hex:                     xxd -p <<< 'ABC' (Line feed is added at the end, 0x0a)
Hex to ASCII:                     xxd -r <<< 0x414243
Hash / Fuzzy hash:                <hash_algo>sum / ssdeep


The stack and calling conventions:

* In x64 programs, RSI and RDI may be used to pass function arguments instead of pushing them to the stack


Note: remember you won't be able to see memory addresses without running the program


GDB - GNU Debugger:

* There's an init file for gdb called .gdbinit to set options to be run at gdb's startup (you can create one in the cur dir, this overrides the global $HOME/.gdbinit file)

Ask for help:                     h [<command>]
Quit:                             q
Open binary:                      gdb <binary>
Disassemble function:             disas <function> (e.g.: disas main)
Set Intel syntax:                 set disassembly-flavor intel
Set breakpoint:                   b <function | line | *address>
Set watchpoint (expr changes):    watch <expr>
Run program:                      r [arglist]
Display val of expr:              p [/<format={x|d|u|o|t|a|c|f}>] <expression>
Examine memory at address expr:   x [/<count><unit={b|h|w|g}><format={s|i}>] <expr> (e.g.: x/s <addr> to see string val at addr)
Display program stack:            bt
Continue execution:               c
Next line, step over function:    n
Next line, step into function:    s
Register values:                  info registers (most regs); info all-reg (all regs); info <reg> (given reg)
Change var value                  set $<var_name | register>=<value>
Show next 10 lines of source:     list


radare2 â€” Hexadecimal editor, disassembler and debugger:

* r2 (radare2) starts at the beginning of the text segments, that is, _start (entry0 in r2; see stackoverflow.com/a/45595101 for more info)

Open program:                             r2 <program> (-d: debug mode)
Ask for help:                             ?[<command>] (use ? anywhere)
Quit:                                     q | exit
Analyse and autoname functions:           aaa
Print all functions:                      afl
Seek to address / function:               s <addr | function> (go to main: s sym.main)
Print disassembly of cur function:        pdf
Enter visual mode (control flow graph):   VV (tab, shift-tab: move around; R: randomize colors; p: rotate graph modes; =: toggle graph layout)
Enter visual mode (panels):               V! (use s/S to step into/over)
Enter command mode in visual:             :
Add breakpoint (debug mode):              db <addr | function> (e.g.: db sym.main)
Run | continue execution:                 dc
Change registers:                         dr <register>=<value>
Register values:                          dr [<register>] (all by default)
Examine memory:                           x @ <addr | func> | x/[...] same as gdb
Evaluate expr in other formats:           ? <expr>
Find string in memory segment:            izz | grep <segment>
Rename local variable:                    afvn <prev_name> <new_name>


Memory layout of C programs:

.text:   executable code
.data:   global initialized data and static initialized data
.rodata: string literal or const variable
.bss:    global uninitialized data and static uninitialized data (doesn't occupy any size in ELF)
heap:    dynamically allocated memory
stack:   program stack (ret addr, func params, tmp vars), each func call creates a new stack frame
