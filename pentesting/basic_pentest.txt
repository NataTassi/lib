* Organize all data you get from your target using a clean folder hierarchy and descriptive file names.
* Use tee to write the output of any command to a file besides printing to stdout.

nmap -A -oN <output_file> <ip> --> Find services and versions in the 1000 most common ports, and OS info

gobuster dir -u http://<ip> -w /usr/share/dirb/wordlists/common.txt --> Run a directory scan on a website to find hidden dirs

enum4linux -a <ip> --> Enumerate Samba to find users, groups, shares, hostname and Samba version among other things (enum4linux is a Perl script)

crunch <min_pass_len> <max_pass_len> <alphabet_as_string> --> Generate every single password with the given restrictions (output goes to stdout, redirect to a file)

hydra -l <user> -P /usr/share/wordlists/rockyou.txt <ip> <protocol> --> Brute force the password for a given user (or list of users, -L <user_list>) using the given dict

hydra -l admin -P /usr/share/wordlists/rockyou.txt -m "/login.php:username=^USER^&password=^PASS^:S=logout" <host> -s <port> http-post-form -v -f --> Brute force login credentials, look for the parameters in the POST request in Developer Options (Ctrl-Shift-i) -> Network

Find privesc vectors with enum tools like PEASS. Download (using scp, wget or curl in Linux) and run linpeas.sh in Linux or winPEAS.bat in Windows  into the target machine. /tmp or /dev/shm (shared memory) are good options to save the script in Linux.

ssh -i <ssh_private_key_file> <user>@<ip> --> It could be used to log into the server via SSH using a private key file
(/path/to/ssh2john.py <ssh_private_key_file> > ssh_key_hash) && john [--wordlist='/path/to/dict.txt'] ssh_key_hash --> Crack ssh private key passphase (rockyou.txt is a great option)
